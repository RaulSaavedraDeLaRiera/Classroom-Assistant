import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../../hooks/useAuth';
import UsersService from '../../services/users.service';
import { PageHeader } from '../../components/layout';
import { Users, UserCheck, BookOpen } from 'lucide-react';
import StudentFilterBar from '../../components/common/StudentFilterBar';

interface Student {
  _id: string;
  name: string;
  email: string;
  role: string;
  active: boolean;
  profile?: any;
  createdAt: string;
}

interface Enrollment {
  _id: string;
  courseId: string;
  courseTitle: string;
  enrolledAt: string;
  progress: number;
  status: string;
}

export default function TeacherStudentsPage() {
  const { user, isLoading } = useAuth();
  const router = useRouter();
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [students, setStudents] = useState<Student[]>([]);
  const [studentsWithStats, setStudentsWithStats] = useState<(Student & { enrollments?: Enrollment[] })[]>([]);
  const [filteredStudents, setFilteredStudents] = useState<(Student & { enrollments?: Enrollment[] })[]>([]);
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);
  const [loading, setLoading] = useState(true);
  const [newStudentEmail, setNewStudentEmail] = useState('');
  const [newStudentName, setNewStudentName] = useState('');
  const [showAddForm, setShowAddForm] = useState(false);

  useEffect(() => {
    if (!isLoading && user) {
      if (user.role !== 'teacher') {
        router.push('/');
      } else {
        setIsAuthorized(true);
        loadStudents();
      }
    } else if (!isLoading && !user) {
      router.push('/login');
    }
  }, [user, isLoading, router]);

  const loadStudents = async () => {
    try {
      setLoading(true);
      if (user?.id) {
        const studentsData = await UsersService.getInstance().getStudentsByTeacher(user.id);
        setStudents(studentsData);
        
        // Load basic enrollment info for each student
        const studentsWithEnrollments = await Promise.all(
          studentsData.map(async (student) => {
            try {
              const enrollments = await UsersService.getInstance().getStudentEnrollments(student._id);
              return { ...student, enrollments };
            } catch (error) {
              console.error(`Error loading enrollments for student ${student._id}:`, error);
              return { ...student, enrollments: [] };
            }
          })
        );
        
        setStudentsWithStats(studentsWithEnrollments);
        setFilteredStudents(studentsWithEnrollments);
      }
    } catch (error) {
      console.error('Error loading students:', error);
    } finally {
      setLoading(false);
    }
  };

  // Handle student search
  const handleStudentSearch = (student: Student | null) => {
    setSelectedStudent(student);
    if (student) {
      // Filter to show only the selected student
      const filtered = studentsWithStats.filter(s => s._id === student._id);
      setFilteredStudents(filtered);
    } else {
      // Show all students
      setFilteredStudents(studentsWithStats);
    }
  };

  // Filter students based on search query
  const filterStudents = (query: string) => {
    if (!query.trim()) {
      setFilteredStudents(studentsWithStats);
      return;
    }

    const searchQuery = query.toLowerCase();
    const filtered = studentsWithStats.filter(student => {
      const fullName = `${student.name} ${student.email}`.toLowerCase();
      return fullName.includes(searchQuery) || 
             student.name.toLowerCase().includes(searchQuery) ||
             student.email.toLowerCase().includes(searchQuery);
    });
    
    setFilteredStudents(filtered);
  };

  const handleAddStudent = async () => {
    if (!newStudentName.trim() || !newStudentEmail.trim()) {
      alert('Please fill in both name and email');
      return;
    }

    try {
      if (user?.id) {
        const existingStudent = students.find(s => s.email === newStudentEmail);
        if (existingStudent) {
          alert('Student is already in your list');
          return;
        }

        const result = await UsersService.getInstance().createStudentWithTeacher(user.id, {
          name: newStudentName,
          email: newStudentEmail
        });
        
        await loadStudents();
        
        setNewStudentName('');
        setNewStudentEmail('');
        setShowAddForm(false); // Close the form after successful addition
        
        if (result.action === 'created_new_student') {
          alert(`New student created successfully!\n\nName: ${newStudentName}\nEmail: ${newStudentEmail}\nPassword: ${result.autoGeneratedPassword}\n\nPlease share this information with the student.`);
        } else if (result.action === 'added_existing_student') {
          alert(`Existing student added to your list successfully!\n\nName: ${newStudentName}\nEmail: ${newStudentEmail}\n\nNote: This student already had an account in the system.`);
        } else {
          alert(`Student operation completed successfully!\n\nName: ${newStudentName}\nEmail: ${newStudentEmail}`);
        }
      } else {
        alert('User not authenticated. Please refresh the page.');
      }
    } catch (error: any) {
      console.error('Error adding student:', error);
      
      if (error.message && error.message.includes('already associated')) {
        alert('This student is already in your list');
      } else if (error.message && error.message.includes('already exists')) {
        alert('This student already exists in the system');
      } else {
        alert(`Error adding student: ${error.message || 'Please try again'}`);
      }
    }
  };

  const handleDeleteStudent = async (studentId: string, studentName: string) => {
    if (confirm(`Are you sure you want to remove ${studentName}? This action cannot be undone.`)) {
      try {
        if (user?.id) {
          await UsersService.getInstance().deleteStudent(studentId, user.id);
          await loadStudents();
          alert(`Student ${studentName} removed successfully.`);
        } else {
          alert('User not authenticated. Please refresh the page.');
        }
      } catch (error) {
        console.error('Error deleting student:', error);
        alert('Error removing student. Please try again.');
      }
    }
  };

  const handleViewStudent = (studentId: string) => {
    router.push(`/teacher/students/${studentId}`);
  };

  if (isLoading) {
    return <div className="min-h-screen flex items-center justify-center">Loading...</div>;
  }

  if (!isAuthorized) {
    return null;
  }

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Background with Dot Texture */}
      <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-gray-50 to-slate-100">
        <div className="absolute inset-0 opacity-30" style={{
          backgroundImage: `radial-gradient(circle, #64748b 1px, transparent 1px)`,
          backgroundSize: '20px 20px'
        }}></div>
        <div className="absolute inset-0 bg-white/50"></div>
      </div>

      <div className="relative z-10">
      <PageHeader
        title="Student Management"
        subtitle="Manage your students and track their progress"
        showBackButton={true}
        backButtonText="Back to Teacher"
        onBackClick={() => router.push('/teacher')}
        titleGradient="from-green-600 to-green-700"
        showLogout={true}
      />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white shadow rounded-lg">
          {/* Student Statistics and Add Button */}
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-gray-900">My Students</h2>
              <button
                onClick={() => setShowAddForm(!showAddForm)}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors flex items-center space-x-2 shadow-sm hover:shadow-md"
              >
                <UserCheck className="h-4 w-4" />
                <span>{showAddForm ? 'Cancel' : 'Add Student'}</span>
              </button>
            </div>
            
            {students.length > 0 && (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <Users className="w-6 h-6 text-green-600" />
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-green-600">Total Students</p>
                      <p className="text-2xl font-bold text-green-900">{students.length}</p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-blue-100 rounded-lg">
                      <UserCheck className="w-6 h-6 text-blue-600" />
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-blue-600">Students in Courses</p>
                      <p className="text-2xl font-bold text-blue-900">{studentsWithStats.filter(s => s.active && s.enrollments && s.enrollments.length > 0).length}</p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-purple-100 rounded-lg">
                      <BookOpen className="w-6 h-6 text-purple-600" />
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-purple-600">Total Enrollments</p>
                      <p className="text-2xl font-bold text-purple-900">
                        {studentsWithStats.reduce((sum, s) => sum + (s.enrollments?.length || 0), 0)}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Student Filter */}
            {students.length > 0 && (
              <div className="mt-6">
                <StudentFilterBar
                  onFilterChange={filterStudents}
                  placeholder="Search student by name or email..."
                  className="max-w-md"
                  showResults={true}
                  students={students}
                  onStudentSelect={(student) => {
                    // Optional: scroll to student or highlight
                  }}
                />
              </div>
            )}
          </div>

          {/* Add Student Form */}
          {showAddForm && (
            <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Add New Student</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Student Name *
                </label>
                <input
                  type="text"
                  value={newStudentName}
                  onChange={(e) => setNewStudentName(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  placeholder="Enter student name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Student Email *
                </label>
                <input
                  type="email"
                  value={newStudentEmail}
                  onChange={(e) => setNewStudentEmail(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  placeholder="Enter student email"
                />
              </div>
              <div className="flex items-end">
                <button
                  onClick={handleAddStudent}
                  className="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors"
                >
                  Add Student
                </button>
              </div>
            </div>
          </div>
          )}

          {/* Students List */}
          <div className="px-6 py-4">
            {loading ? (
              <div className="text-center py-8">Loading students...</div>
            ) : filteredStudents.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <p className="text-lg mb-2">No students found</p>
                <p className="text-sm">Try another search term</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                {filteredStudents.map((student) => (
                  <div
                    key={student._id}
                    className="border-2 border-blue-300 rounded-lg p-4 hover:shadow-lg transition-all duration-200 bg-white/90 backdrop-blur-sm hover:border-blue-400"
                  >
                    {/* Student Header */}
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1 min-w-0">
                        <h3 className="text-lg font-semibold text-gray-900 truncate">{student.name}</h3>
                        <p className="text-sm text-gray-600 truncate">{student.email}</p>
                      </div>
                      <div className="text-xs text-gray-500 ml-2 flex-shrink-0">
                        {new Date(student.createdAt).toLocaleDateString()}
                      </div>
                    </div>
                    
                    {/* Courses List */}
                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-700 mb-2">Enrolled Courses:</p>
                      {student.enrollments && student.enrollments.length > 0 ? (
                        <div className="flex flex-wrap gap-1">
                          {student.enrollments.map((enrollment) => (
                            <span
                              key={enrollment._id}
                              className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full"
                            >
                              {enrollment.courseTitle}
                            </span>
                          ))}
                        </div>
                      ) : (
                        <p className="text-sm text-gray-500">No courses enrolled</p>
                      )}
                    </div>
                    
                    {/* Action Buttons */}
                    <div className="flex flex-col sm:flex-row gap-2">
                      <button
                        onClick={() => handleViewStudent(student._id)}
                        className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm transition-colors"
                      >
                        View Details
                      </button>
                      <button
                        onClick={() => handleDeleteStudent(student._id, student.name)}
                        className="flex-1 px-3 py-2 border border-red-600 text-red-600 hover:bg-red-50 rounded text-sm transition-colors"
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
      </div>
    </div>
  );
}
